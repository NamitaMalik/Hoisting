{
  "name": "Hoisting",
  "tagline": "This blog discusses hoisting in JavaScript.",
  "body": "#Hoisting in JavaScript\r\n\r\nAs we all know that in **JavaScript** there are only 2 **scope** i.e. **Global scope** and **Function scope**. There is no **block scope** in **JavaScript**. Now, here we need to look into a very important and interesting concept of **JavaScript** i.e. **Hoisting**. Since **JavaScript** has no **block scope**, so due to obvious reasons a **variable** declared anywhere in a **function** would be visible/available everywhere in that **function**. So this means that variable declared at the bottom of the **function** will be visible in the whole **function**. Lets first run below **JavaScript** code and see the output:\r\n\r\n```JavaScript\r\nvar a = 5;\r\nconsole.log(a); // 5\r\nfunction funcScopeTest() {\r\n  console.log(a); // undefined\r\n  var a = 10;\r\n  console.log(a); // 10\r\n}\r\nconsole.log(a); // 5\r\nfuncScopeTest();\r\n```\r\n\r\nAfter reading above paragraph and watching the output of above code, you must be feeling strange and might be thinking what is happening? why and how??? etc. Lets understand:\r\n\r\nOn line no 1, we are defining a variable with name **a**. Line 2 of the above code prints \"5\", which doesn't requires any explanation. Now, let's look at the line 4. We see that it logs **undefined**, even though when **a** has been defined as **global variable** at line no. 1, with value ```5``` assigned to it. Well, the reason behind this behaviour is that **var a** has also been defined in the **function** **funcScopeTest** and in **JavaScript**, **function scope** gets preference. Now, you would be thinking that the **var a** in **funcScopeTest** has been defined in the next line, so how come **JavaScript** engine gets to know that there is **var a** in funcScopeTest **function** too ?? The answer is a simple yet magical term **hoisting**.\r\n\r\nDue **hoisting**, a **variable** defined anywhere in the **function** is taken to the top of the **function**!\r\n\r\nHey..Hang on.. I forgot to add an important point here :\r\n\r\n**Hoisting takes only declaration of variables to the top, assigned variables remain where they are!**\r\n\r\n**Hoisting** happens in **parsing** phase. Actually **JavaScript** runs in two steps:\r\n1. Parsing Phase\r\n2. Execution Phase.\r\n\r\nSo at first/Parsing Phase, **JavaScript**, perform **hoisting** with parsing. So after the parsing phase and before the execution phase above code will be converted to below:\r\n\r\n```JavaScript\r\nvar a = 5;\r\nconsole.log(a); // 5\r\nfunction funcScopeTest() {\r\n  var a;\r\n  console.log(a); // undefined\r\n  a = 10;\r\n  console.log(a); // 10\r\n}\r\nconsole.log(a); // 5\r\nfuncScopeTest();\r\n```\r\n\r\nYou will notice that difference between the above snippets is that only declaration of variable (in our example variable name is **a**) has moved to the first line of the **function**. Assignment is still happening on the same place!\r\n\r\nThis was all about **Hoisting** in **JavaScript**.\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/NamitaMalik)\r\n\r\n[Twitter](https://twitter.com/namita13_04)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/namita-malik-a7885b23)\r\n\r\n[More Blogs By Me](https://namitamalik.github.io/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}